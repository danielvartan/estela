[
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "SISVAN 2019",
    "section": "Overview",
    "text": "Overview\nThis analysis focused on plotting data related to the food consumption of Brazilian children aged 2 to 4 years, as monitored by Brazilâ€™s Food and Nutrition Surveillance System (SISVAN) in 2019."
  },
  {
    "objectID": "index.html#setting-things-up",
    "href": "index.html#setting-things-up",
    "title": "SISVAN 2019",
    "section": "Setting things up",
    "text": "Setting things up\n\nCodelibrary(checkmate, quietly = TRUE)\nlibrary(colorspace, quietly = TRUE)\nlibrary(dplyr, quietly = TRUE)\nlibrary(geobr, quietly = TRUE)\nlibrary(ggplot2, quietly = TRUE)\nlibrary(googlesheets4, quietly = TRUE)\nlibrary(grDevices, quietly = TRUE)\nlibrary(here, quietly = TRUE)\nlibrary(raster, quietly = TRUE)\nlibrary(RColorBrewer, quietly = TRUE)\nlibrary(rutils, quietly = TRUE) # danielvartan/rutils (GitHub)\nlibrary(terra, quietly = TRUE)\nlibrary(tidyr, quietly = TRUE)\nlibrary(tidyterra, quietly = TRUE)\nlibrary(sf, quietly = TRUE)\nlibrary(spatstat.geom, quietly = TRUE)\nlibrary(stringdist, quietly = TRUE)\nlibrary(stringr, quietly = TRUE)\nlibrary(viridis, quietly = TRUE)\n\n\n\nCodeget_data &lt;- function(\n    sheet,\n    ss = \"1nnDzHKufJGujXiuCFb6Hj14k0HIt6JPV0Y2wnqa2eAc\",\n    sheet_ignore = c(\"Documentation\", \"Codebook\", \"Validation\", \"Template\")\n    ) {\n  checkmate::assert_string(sheet)\n  checkmate::assert_string(ss)\n  checkmate::assert_character(sheet_ignore)\n  rutils:::assert_internet()\n\n  ss &lt;- googlesheets4::gs4_get(ss)\n  sheets &lt;- ss$sheets$name[!ss$sheets$name %in% sheet_ignore]\n  checkmate::assert_subset(sheet, sheets)\n\n  if (!sheet == \"City validation\") {\n    cities &lt;- googlesheets4::read_sheet(\n      ss = ss, \n      sheet = \"City validation\", \n      col_names = TRUE,\n      col_types = \"c\",\n      na = c(\"\", \"NA\"), \n      trim_ws = TRUE, \n      skip = 0\n    ) |&gt; \n      magrittr::extract2(\"value\")\n  }\n  \n  out &lt;- googlesheets4::read_sheet(\n      ss = ss, \n      sheet = sheet, \n      col_names = TRUE, \n      col_types = \"c\",\n      na = c(\"\", \"NA\"), \n      trim_ws = TRUE, \n      skip = 0\n    )\n  \n  if (!sheet == \"City validation\") {\n    out |&gt; \n      dplyr::mutate(n = as.integer(n)) |&gt;\n      dplyr::filter(!n == 0)\n  } else {\n    out\n  }\n}\n\n\n\nCodeassert_color &lt;- function(color, null_ok = FALSE, na_ok = FALSE) {\n  color_pattern &lt;- \"(?i)^#[a-f0-9]{3}$|^#[a-f0-9]{6}$|^transparent$\"\n  \n  checkmate::assert_flag(null_ok)\n  checkmate::assert_flag(na_ok)\n  \n  name &lt;- deparse(substitute(color))\n  \n  if (is.null(color) && isFALSE(null_ok)) {\n    cli::cli_abort(\n      paste0(\n        \"{.strong {cli::col_red(name)}} cannot be {.strong NULL}.\"\n      )\n    )\n  }\n  \n  if (!is.null(color)) {\n    if (is.na(color) && isFALSE(na_ok)) {\n      cli::cli_abort(\n        paste0(\n          \"{.strong {cli::col_red(name)}} cannot be {.strong NA}.\"\n        )\n      )\n    }\n  }\n  \n  if (!is.null(color) && !is.na(color) &&\n      !color %in% grDevices::colors() && \n      !checkmate::test_string(color, pattern = color_pattern)) {\n    cli::cli_abort(\n      paste0(\n        \"{.strong {cli::col_red(name)}} is not a valid color code. \",\n        \"It must contain a hexadecimal color code or one of the \",\n        \"values in {.strong {cli::col_blue('grDevices::color()')}}.\"\n      )\n    )\n  }\n\n  invisible(NULL)\n}\n\n\n\nCodeassert_color_options &lt;- function(\n    color_low = NULL, color_high = NULL, viridis = NULL\n  ) {\n  viridis_choices &lt;- c(\n    \"magma\", \"A\", \"inferno\", \"B\", \"plasma\", \"C\", \"viridis\", \"D\",\n    \"cividis\", \"E\", \"rocket\", \"F\", \"mako\", \"G\", \"turbo\", \"H\"\n  )\n  \n  color_pattern &lt;- \"(?i)^#[a-f0-9]{6}$\"\n  \n  checkmate::assert_string(color_low, pattern = color_pattern, null.ok = TRUE)\n  checkmate::assert_string(color_high, pattern = color_pattern, null.ok = TRUE)\n  checkmate::assert_choice(viridis, viridis_choices, null.ok = TRUE)\n  \n  if (is.null(color_low) && !is.null(color_high) ||\n      !is.null(color_low) && is.null(color_high)) {\n    cli::cli_abort(\n      paste0(\n        \"You must provide both \", \n        \"{.strong {cli::col_blue('color_low')}} and \",\n        \"{.strong {cli::col_red('color_high')}} \",\n        \"arguments at the same time.\"\n      )\n    )\n  } else if ((!is.null(color_low) | !is.null(color_high)) && \n             !is.null(viridis)) {\n    cli::cli_abort(\n      paste0(\n        \"You can't use both \", \n        \"{.strong {cli::col_blue('color_low/color_high')}} and \",\n        \"{.strong {cli::col_red('viridis')}} \",\n        \"arguments at the same time.\"\n      )\n    )\n  } else {\n    invisible(NULL)\n  }\n}\n\n\n\nCodeadd_viridis &lt;- function(\n    plot, \n    option, \n    color_na = NULL, \n    binned = FALSE,\n    breaks = ggplot2::waiver(),\n    point = FALSE\n  ) {\n  option_choices &lt;- c(\n    \"magma\", \"A\", \"inferno\", \"B\", \"plasma\", \"C\", \"viridis\", \"D\",\n    \"cividis\", \"E\", \"rocket\", \"F\", \"mako\", \"G\", \"turbo\", \"H\"\n  )\n  \n  checkmate::assert_class(plot, \"gg\")\n  checkmate::assert_choice(option, option_choices, null.ok = TRUE)\n  assert_color(color_na, null_ok = TRUE)\n  checkmate::assert_flag(binned)\n  checkmate::assert_multi_class(breaks, c(\"waiver\", \"numeric\"))\n  checkmate::assert_flag(point)\n  \n  if (isTRUE(point)) {\n    plot + \n      viridis::scale_color_viridis(\n        option = option,\n        na.value = color_na,\n        breaks = breaks\n      )\n  } else if (isTRUE(binned)) {\n    plot +\n      ggplot2::scale_fill_binned(\n        type = \"viridis\",\n        na.value = color_na,\n        breaks = breaks\n      )\n  } else {\n    plot + \n      viridis::scale_fill_viridis(\n        option = option,\n        na.value = color_na,\n        breaks = breaks\n      )\n  }\n}\n\n\n\nCodeadd_fill &lt;- function(\n    plot, \n    color_low, \n    color_high, \n    color_na = NULL,\n    binned = FALSE,\n    breaks = ggplot2::waiver(),\n    point = FALSE\n) {\n  checkmate::assert_class(plot, \"gg\")\n  assert_color(color_low, null_ok = TRUE)\n  assert_color(color_high, null_ok = TRUE)\n  assert_color(color_na, null_ok = TRUE)\n  checkmate::assert_flag(binned)\n  checkmate::assert_multi_class(breaks, c(\"waiver\", \"numeric\"))\n  checkmate::assert_flag(point)\n  \n  if (isTRUE(point)) {\n    plot + \n      ggplot2::scale_color_continuous(\n        low = color_low, \n        high = color_high,\n        na.value = color_na,\n        breaks = breaks\n      )\n  } else if (isTRUE(binned)) {\n    plot + \n      ggplot2::scale_fill_binned(\n        type = \"gradient\",\n        low = color_low,\n        high = color_high,\n        na.value = color_na,\n        breaks = breaks\n      )\n  } else {\n    plot + \n      ggplot2::scale_fill_gradient(\n        low = color_low, \n        high = color_high,\n        na.value = color_na,\n        breaks = breaks\n      )\n  }\n}\n\n\n\nCodeadd_theme &lt;- function(plot, theme) {\n  theme_choices &lt;- c(\"minimal\", \"void\")\n  \n  checkmate::assert_class(plot, \"gg\")\n  checkmate::assert_choice(theme, theme_choices, null.ok = TRUE)\n  \n  if (theme == \"minimal\") {\n    plot + ggplot2::theme_minimal()\n  } else if (theme == \"void\") {\n    plot + ggplot2::theme_void()\n  } else {\n    invisible(NULL)\n  }\n}\n\n\n\nCodeplot_sf &lt;- function(data, color_border = NA) {\n  checkmate::assert_data_frame(data)\n  checkmate::assert_subset(c(\"abbrev_state\", \"name_muni\", \"n\"), names(data))\n  assert_color(color_border, na_ok = TRUE)\n  \n  data |&gt;\n    ggplot2::ggplot() +\n    ggplot2::geom_sf(\n      ggplot2::aes(fill = n),\n      color = color_border\n    )\n}\n\n\n\nCodeplot_raster &lt;- function(\n    data, \n    color_na = \"white\", \n    color_border = \"black\",\n    breaks = ggplot2::waiver()\n  ) {\n  checkmate::assert_data_frame(data)\n  checkmate::assert_subset(c(\"abbrev_state\", \"name_muni\", \"n\"), names(data))\n  assert_color(color_na, null_ok = TRUE)\n  assert_color(color_border, na_ok = TRUE)\n  checkmate::assert_multi_class(breaks, c(\"waiver\", \"numeric\"))\n  rutils:::assert_internet()\n  \n  res &lt;- as.data.frame(do.call(\n    \"rbind\", \n    lapply(sf::st_geometry(data), sf::st_bbox))\n  )\n  \n  data_points &lt;- data |&gt; sf::st_centroid() |&gt; rutils:::shush()\n  \n  data_points &lt;- dplyr::tibble(\n    lon = sf::st_coordinates(data_points)[, 1],\n    lat = sf::st_coordinates(data_points)[, 2],\n    n = data$n\n  ) |&gt;\n    # tidyr::drop_na() |&gt;\n    dplyr::mutate(\n      n = dplyr::if_else(n == 0, NA, n),\n      order = rank(n, ties.method = \"first\")\n    ) |&gt;\n    dplyr::arrange(order)\n  \n  ras_dom &lt;- raster::raster(\n    xmn = min(res[[\"xmin\"]]),\n    xmx = max(res[[\"xmax\"]]),\n    ymn = min(res[[\"ymin\"]]),\n    ymx = max(res[[\"ymax\"]]),\n    resolution = 0.25,\n    crs = sf::st_crs(data)\n  )\n  \n  sp::coordinates(data_points) &lt;- ~ lon + lat\n  data_raster &lt;- \n    data_points |&gt; \n    raster::rasterize(ras_dom, \"n\", update = TRUE) |&gt;\n    terra::rast()\n  \n  geobr_data_br &lt;- \n    geobr::read_country(year = 2019, showProgress = FALSE) |&gt;\n    rutils:::shush()\n  \n  plot &lt;- data |&gt;\n    ggplot2::ggplot() +\n    ggplot2::geom_sf(\n      data = geobr_data_br,\n      fill = \"transparent\", # \"white\"\n      color = color_border\n    ) + \n    tidyterra::geom_spatraster(\n      data = data_raster\n    ) +\n    ggplot2::geom_sf(\n      data = geobr_data_br,\n      fill = \"transparent\",\n      color = color_border\n    )\n  \n  plot |&gt; add_viridis(option = \"plasma\", \"transparent\", FALSE, breaks, FALSE)\n}\n\n\n\nCodeplot_point &lt;- function(\n    data, \n    color_na = \"white\", \n    color_border = \"white\",\n    breaks = ggplot2::waiver(),\n    alpha = 0.7\n  ) {\n  checkmate::assert_data_frame(data)\n  checkmate::assert_subset(c(\"abbrev_state\", \"name_muni\", \"n\"), names(data))\n  assert_color(color_na, null_ok = TRUE)\n  assert_color(color_border, na_ok = TRUE)\n  checkmate::assert_multi_class(breaks, c(\"waiver\", \"numeric\"))\n  checkmate::assert_number(alpha, lower = 0, upper = 1)\n  rutils:::assert_internet()\n  \n  data_points &lt;- data |&gt; sf::st_centroid() |&gt; rutils:::shush()\n  \n  data_points &lt;- dplyr::tibble(\n    lon = sf::st_coordinates(data_points)[, 1],\n    lat = sf::st_coordinates(data_points)[, 2],\n    n = data$n,\n    order = rank(n, ties.method = \"first\")\n  ) |&gt;\n    tidyr::drop_na() |&gt;\n    dplyr::arrange(order)\n  \n  geobr_data_br &lt;- \n    geobr::read_country(year = 2019, showProgress = FALSE) |&gt;\n    rutils:::shush()\n  \n  data |&gt;\n    ggplot2::ggplot() +\n    ggplot2::geom_sf(\n      data = geobr_data_br,\n      fill = color_na, # \"transparent\"\n      color = color_border\n    ) +\n    ggplot2::geom_point(\n      data = data_points,\n      mapping = ggplot2::aes(\n        x = lon, \n        y = lat, \n        size = n, \n        color = n\n      ),\n      alpha = alpha\n    ) +\n    ggplot2::guides(\n      color = ggplot2::guide_legend(), \n      size = ggplot2::guide_legend(),\n    ) +\n    ggplot2::scale_size_continuous(\n      range = c(0, 5),\n      breaks = breaks\n    ) +\n    ggplot2::theme(legend.key = ggplot2::element_blank())\n}\n\n\n\nCodeplot_brazil_city_map &lt;- function(\n    data, \n    color_low = NULL,\n    color_high = NULL,\n    color_na = \"white\",\n    color_border = NA,\n    viridis = NULL,\n    binned = TRUE,\n    breaks = NULL,\n    zero_na = FALSE,\n    point = FALSE,\n    alpha = 0.7,\n    density = FALSE,\n    text_size = NULL,\n    theme = NULL\n  ) {\n  viridis_choices &lt;- c(\n    \"magma\", \"A\", \"inferno\", \"B\", \"plasma\", \"C\", \"viridis\", \"D\",\n    \"cividis\", \"E\", \"rocket\", \"F\", \"mako\", \"G\", \"turbo\", \"H\"\n  )\n  \n  theme_choices &lt;- c(\"minimal\", \"void\")\n  \n  checkmate::assert_tibble(data)\n  checkmate::assert_subset(c(\"abbrev_state\", \"name_muni\", \"n\"), names(data))\n  assert_color(color_low, null_ok = TRUE)\n  assert_color(color_high, null_ok = TRUE)\n  assert_color(color_na, null_ok = TRUE)\n  assert_color(color_border, na_ok = TRUE)\n  checkmate::assert_choice(viridis, viridis_choices, null.ok = TRUE)\n  checkmate::assert_flag(binned)\n  checkmate::assert_multi_class(breaks, c(\"waiver\", \"numeric\"), null.ok = TRUE)\n  checkmate::assert_flag(zero_na)\n  checkmate::assert_flag(point)\n  checkmate::assert_number(alpha, lower = 0, upper = 1)\n  checkmate::assert_flag(density)\n  checkmate::assert_number(text_size, null.ok = TRUE)\n  checkmate::assert_choice(theme, theme_choices, null.ok = TRUE)\n  assert_color_options(color_low, color_high, viridis)\n  rutils:::assert_internet()\n    \n  geobr_data &lt;-\n      geobr::read_municipality(year = 2019, showProgress = FALSE) |&gt;\n      rutils:::shush()\n\n  if (is.null(color_low) || is.null(color_high)) {\n    colors &lt;- RColorBrewer::brewer.pal(5,\"YlOrRd\")\n    color_low &lt;- dplyr::first(colors) # \"#ffebd6\"\n    color_high &lt;- dplyr::last(colors) # \"#A90F06\"\n  }\n  \n  data &lt;- \n    geobr_data |&gt;\n    dplyr::left_join(data, by = c(\"abbrev_state\", \"name_muni\"))\n  \n  if (isTRUE(zero_na)) {\n    data &lt;- data |&gt; dplyr::mutate(n = ifelse(is.na(n), 0, n))\n  }\n  \n  if (is.null(breaks)) {\n    # breaks &lt;- c(0, 250, 500, 750, 1000)\n    \n    breaks &lt;- seq(\n      signif(max(data$n, na.rm = TRUE) / 5, 1), \n      max(data$n, na.rm = TRUE), \n      by = signif(max(data$n, na.rm = TRUE) / 5, 1)\n    ) |&gt; \n      signif(1)\n  }\n  \n  if (isTRUE(density)) {\n    # Not implemented.\n    # plot &lt;- data |&gt; plot_raster(color_na, color_border, breaks)\n  } else if (isTRUE(point)) {\n    plot &lt;- data |&gt; plot_point(color_na, color_border, breaks, alpha)\n  } else {\n    plot &lt;- data |&gt; plot_sf(color_border)\n  }\n  \n  plot &lt;- \n    plot +\n    ggplot2::labs(\n      x = \"Longitude\", \n      y = \"Latitude\",\n      color = \"Total\",\n      fill = \"Total\",\n      size = \"Total\"\n    ) +\n    ggplot2::theme(text = ggplot2::element_text(size = text_size))\n\n  if (is.null(viridis)) {\n    plot &lt;- \n      plot |&gt; \n      add_fill(color_low, color_high, color_na, binned, breaks, point)\n  } else {\n    plot &lt;- plot |&gt; add_viridis(viridis, color_na, binned, breaks, point)\n  }\n\n  if (!is.null(theme)) plot &lt;- plot |&gt; add_theme(theme)\n  \n  print(plot)\n  invisible(plot)\n}\n\n\n\n\nCodebreaks &lt;- c(250, 500, 750, 1000)"
  },
  {
    "objectID": "index.html#habit-of-having-at-least-the-three-main-meals-of-the-day",
    "href": "index.html#habit-of-having-at-least-the-three-main-meals-of-the-day",
    "title": "SISVAN 2019",
    "section": "Habit of having at least the three main meals of the day",
    "text": "Habit of having at least the three main meals of the day\n\nCodedata &lt;- get_data(\"Habits - Meals\")\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''City validation''.\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''Habits - Meals''.\n\n\n\nCodeif (checkmate::test_tibble(data)) {\n  saveRDS(data, file.path(data_dir, \"habits_meals.rds\"))\n}\n\n\n\nCodedata |&gt; plot_brazil_city_map(breaks = breaks)\n\n\n\n\n\n\n\nAlternatives\n\nCodedata |&gt; plot_brazil_city_map(binned = FALSE)\n\n\n\n\n\n\n\n\nCodedata |&gt; plot_brazil_city_map(point = TRUE, breaks = breaks, alpha = 0.5)\n\n\n\n\n\n\n\n\nCodedata |&gt; plot_brazil_city_map(\n  color_na = \"gray95\",\n  breaks = breaks, \n  theme = \"void\"\n)\n\n\n\n\n\n\n\n\nCodedata |&gt; plot_brazil_city_map(viridis = \"plasma\", binned = FALSE)"
  },
  {
    "objectID": "index.html#habit-of-having-meals-while-watching-television",
    "href": "index.html#habit-of-having-meals-while-watching-television",
    "title": "SISVAN 2019",
    "section": "Habit of having meals while watching television",
    "text": "Habit of having meals while watching television\n\nCodedata &lt;- get_data(\"Habits - TV\")\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''City validation''.\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''Habits - TV''.\n\n\n\nCodeif (checkmate::test_tibble(data)) {\n  saveRDS(data, file.path(data_dir, \"habits_tv.rds\"))\n}\n\n\n\nCodedata |&gt; plot_brazil_city_map(breaks = breaks)"
  },
  {
    "objectID": "index.html#consumption-of-beans",
    "href": "index.html#consumption-of-beans",
    "title": "SISVAN 2019",
    "section": "Consumption of beans",
    "text": "Consumption of beans\n\nCodedata &lt;- get_data(\"Consumption - Beans\")\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''City validation''.\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''Consumption - Beans''.\n\n\n\nCodeif (checkmate::test_tibble(data)) {\n  saveRDS(data, file.path(data_dir, \"consumption_beans.rds\"))\n}\n\n\n\nCodedata |&gt; plot_brazil_city_map(breaks = breaks)"
  },
  {
    "objectID": "index.html#consumption-of-fruit",
    "href": "index.html#consumption-of-fruit",
    "title": "SISVAN 2019",
    "section": "Consumption of fruit",
    "text": "Consumption of fruit\n\nCodedata &lt;- get_data(\"Consumption - Fruits\")\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''City validation''.\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''Consumption - Fruits''.\n\n\n\nCodeif (checkmate::test_tibble(data)) {\n  saveRDS(data, file.path(data_dir, \"consumption_fruits.rds\"))\n}\n\n\n\nCodedata |&gt; plot_brazil_city_map(breaks = breaks)"
  },
  {
    "objectID": "index.html#consumption-of-vegetables-and-greens",
    "href": "index.html#consumption-of-vegetables-and-greens",
    "title": "SISVAN 2019",
    "section": "Consumption of vegetables and greens",
    "text": "Consumption of vegetables and greens\n\nCodedata &lt;- get_data(\"Consumption - Vegetables\")\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''City validation''.\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''Consumption - Vegetables''.\n\n\n\nCodeif (checkmate::test_tibble(data)) {\n  saveRDS(data, file.path(data_dir, \"consumption_vegetables.rds\"))\n}\n\n\n\nCodedata |&gt; plot_brazil_city_map(breaks = breaks)"
  },
  {
    "objectID": "index.html#consumption-of-ultraprocessed-foods-upf",
    "href": "index.html#consumption-of-ultraprocessed-foods-upf",
    "title": "SISVAN 2019",
    "section": "Consumption of ultraprocessed foods (UPF)",
    "text": "Consumption of ultraprocessed foods (UPF)\n\nCodedata &lt;- get_data(\"Consumption - UPFs\")\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''City validation''.\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''Consumption - UPFs''.\n\n\n\nCodeif (checkmate::test_tibble(data)) {\n  saveRDS(data, file.path(data_dir, \"consumption_upfs.rds\"))\n}\n\n\n\nCodedata |&gt; plot_brazil_city_map(breaks = breaks)"
  },
  {
    "objectID": "index.html#consumption-of-sugary-drinks",
    "href": "index.html#consumption-of-sugary-drinks",
    "title": "SISVAN 2019",
    "section": "Consumption of sugary drinks",
    "text": "Consumption of sugary drinks\n\nCodedata &lt;- get_data(\"Comsumption - Sugary drinks\")\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''City validation''.\n#&gt; âœ” Reading from \"SISVAN 2019\".\n#&gt; âœ” Range ''Comsumption - Sugary drinks''.\n\n\n\nCodeif (checkmate::test_tibble(data)) {\n  saveRDS(data, file.path(data_dir, \"consumption_sugary_drinks.rds\"))\n}\n\n\n\nCodedata |&gt; plot_brazil_city_map(breaks = breaks)"
  }
]